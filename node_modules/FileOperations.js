/**
 * @author Jackie lin
 * @Date 2014-2-25
 * @Content file operations
 */
var fs = require('fs');
var child_process = require('child_process');
var exec = child_process.exec;
var execFile = child_process.execFile;
var mime = require('Mime');

/**
 * file operation class
 * @param path
 * @constructor
 */
var FileOperations = function () {
    this.fileLength = 0;
};

/**
 * window上计算机目录
 */
FileOperations.prototype.openRootPath = function (callback) {
    var wmicResult;
    var command = exec('wmic logicaldisk get caption', function (err, stdout, stderr) {
        if (err || stderr) {
            console.log('root path open failed' + err + stderr);
            return;
        }
        wmicResult = stdout;
    });

    command.stdin.end();   // stop the input pipe, in order to run in windows xp

    command.on('close', function (code) {
        console.log('wmic close:: code:' + code);
        var data = wmicResult.split('\n'), result = {};
        data.forEach(function (item) {
            var string = item.trim();
            if (string !== 'Caption' && string !== '') {
                var mimetype = mime.stat(string);
                if (mimetype) {
                    result[string] = mimetype;
                }
            }
        });

        callback(result);
    });
};

FileOperations.prototype.openDir = function (path, callback) {
    fs.readdir(path, function (err, files) {
        if (err) {
            console.log('path open failed:' + err);
            return;
        }

        result = {};
        files.forEach(function (item) {
            var string = item.trim();
            if (string) {
                var mimetype = mime.stat(path + '/' + string);
                if (mimetype) {
                    result[path + '/' + string] = mimetype;
                }
            }
        });

        callback(result);
    });
};

/**
 * return file attribute include: file, directory
 * @ path
 */
FileOperations.prototype.fileAttr = function (path) {
    var statType = mime.filestat(path);
    if (!statType) {
        console.warn('Read file error');
        return;
    }

    return statType;
};

/**
 * copy src path to dst path
 * @param filepath
 * @param callback
 */
FileOperations.prototype.copyFile = function (srcpath, dstpath, callback) {
    // source file
    var readable = fs.createReadStream(srcpath);
    // target file
    var writeable = fs.createWriteStream(dstpath);

    var that = this;
    readable.pipe(writeable);
    readable.on('data', function (chunk) {
        that.fileLength += chunk.length;
        // show progress bar
        if (callback) {
            /*timeid = setTimeout((function (fileLength) {
                //readable.pause();
                callback(fileLength);
                //readable.resume();
            })(that.fileLength), time || 1000);*/
            callback(that.fileLength);
        }
    });
};

FileOperations.prototype.openDirPath = function (path, callback) {
    if (!path) {
        console.warn('path must be not null!!');
        return;
    }

    fs.readdir(path, function (err, files) {
        if (err) {
            console.log('dst directory open failed!!');
            return;
        }

        callback(files);
    });
};

FileOperations.prototype.readdirSync = function (path) {
    if (!path) {
        console.log('path must be exists!!');
        return;
    }
    return fs.readdirSync(path);
};

FileOperations.prototype.isExists = function (path, callback) {
    if (!path) {
        console.warn('path must be exists!!');
        return;
    }

    fs.exists(path, function (exists) {
        callback(exists);
    });
};

/**
 * create folder
 * @param callback
 */
FileOperations.prototype.mkdir = function (dst, callback) {
    fs.mkdir(dst, function (err) {
        if (err) {
            console.warn('create folder error:' + err);
            callback(err);
        }

        callback();
    });
};

FileOperations.prototype.rename = function (oldpath, newpath, callback) {
    fs.rename(oldpath, newpath, function () {
        try {
            callback();
        } catch (e) {
            console.log('rename file is error:' + e);
            return;
        }
    });
};

/**
 *  open file or new file
 */
FileOperations.prototype.openFile = function (filepath, flags, callback) {
    if (!filepath && !flags && !callback) {
        console.warn('openFile:: filepath and flags and callback must be exists!!');
        return;
    }

    fs.open(filepath, flags, callback);
};

/**
 * close the file
 */
FileOperations.prototype.closeFile = function (fd, callback) {
    if (!fd && !callback) {
        console.warn('closeFile:: fd and callback must be exists!!');
        return;
    }

    fs.close(fd, function () {
        try {
            callback();
        } catch (e) {
            console.error('file close exec[tion:' + e);
        }
    });
};

/**
 * calculate folder size, ps: it is only fit folder
 * @param filepath
 * @param callback
 */
FileOperations.prototype.filesize = function (filepath, callback) {
    if (!filepath && !callback) {
        console.error('FileOpeartion: filesizeSync:: filepath must be exists!!');
    }

    // path process.cwd() + '/conf/shells'
    // dedug path E:/work/开源项目/Toki/Toki_development/conf/shells
    //{cwd: __dirname}
    var result;
    var command = execFile('fileSize.bat', [filepath], {cwd: process.cwd() + '/conf/shells'}, function (err, stdout, stderr) {
        if (err || stderr) {
            console.log(err + stderr);
            return;
        }
        result = stdout;
    });

    command.stdin.end();   // stop this bat

    command.on('close', function (code) {
        callback(result);
    });
};

/**
 * delete file
 * @param filepath
 */
FileOperations.prototype.unlinkSync = function (filepath) {
    fs.unlinkSync(filepath);
};

FileOperations.prototype.rmdirSync = function (filepath) {
    fs.rmdirSync(filepath);
};

FileOperations.prototype.newEmptyFile = function (filepath) {
    fs.openSync(filepath, 'w+');
};

FileOperations.prototype.writeFileSync = function (filepath, content) {
    fs.writeFileSync(filepath, content);
};

FileOperations.prototype.setFileLength = function(fileLength) {
    if(fileLength === undefined) {
        console.error('setFileLength:: fileLength must be exists!!');
        return;
    }

    this.fileLength = fileLength;
};

module.exports = FileOperations;
