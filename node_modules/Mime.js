/**
 * @author Jackie lin
 * @Date 2014-3-25
 * @Content deal with mime type
 */
var fs = require('fs');
var path = require('path');

var map = {
    'compressed': ['zip', 'rar', 'gz', '7z'],
    'text': ['txt', 'md'],
    'image': ['jpg', 'jpge', 'png', 'gif', 'bmp'],
    'pdf': ['pdf'],
    'css': ['css'],
    'html': ['html'],
    'word': ['doc', 'docx'],
    'powerpoint': ['ppt', 'pptx'],
    'movie': ['mkv', 'avi', 'rmvb'],
    'flash': ['as', 'mxml'],
    'illustrator': ['ai'],
    'music': ['mp3']
};

exports.stat = function(filepath) {
    var result = null;
    try {
        var stat = fs.statSync(filepath);

        if(stat.isDirectory()) {
            result = 'folder';
        } else {
            var ext = path.extname(filepath).substr(1), extentions = null;
            if(!result) {
                for(var key in map) {
                    extentions = map[key];
                    extentions.forEach(function(item) {
                        if(item === ext) {
                            result = key;
                            return false;
                        }
                    });
                }
            }

            if(!result) {
                result = 'blank';
            }
        }
    } catch(e) {
        console.log("Read file stat error:" + e);
        result = undefined;
    }
    return result;
};

/**
 * use asynchronous way to know file situation
 * @param filepath
 */
exports.filestat = function(filepath) {
    if(!filepath && !callback) {
        console.warn("file path and callback must be exists");
        return;
    }

    var result = null;
    try {
        var stat = fs.statSync(filepath);
        if(stat.isFile()) {
            result = 'file';
        } else {
            result = 'directory';
        }
    } catch(e) {
        console.log("Read file error:" + e);
        result = undefined;
    }

    return result;
};